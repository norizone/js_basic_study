---
import Layout from "@/layouts/Layout.astro";
const array1: Array<string> = ["1", "2", "3", "4"];
---

<Layout title="DOM取得・操作">
  <div id="app"></div>
  <p>DOMを配列にして使用</p>
  <!-- <ul>
    {array1.map((item)=>(<li class="item1">{item}</li>))}
  </ul> -->
  <div>
    {
      array1.map((item) => (
        <label class="item2_wrap">
          <p>{item}</p>
          <input class="item2" type="checkbox" />
        </label>
      ))
    }
    <div>
      <button id="bt1" type="button">check!!</button>
    </div>
  </div>
</Layout>

<script>
  {
    const listEls: NodeListOf<HTMLLIElement> =
      document.querySelectorAll("li.item1");
    const arrayListEls = [...listEls];
    console.log(listEls);
    console.log(arrayListEls);
    listEls[0].style.color = "var(--bs-info)";
    arrayListEls[2].style.color = "var(--bs-red)";
  }

  {
    const checkBtn: HTMLButtonElement | null =
      document.querySelector("button#bt1") ?? null;
    const checkEls: NodeListOf<HTMLInputElement> =
      document.querySelectorAll("input.item2");
    const arrayCheckEls = [...checkEls];
    console.log(checkEls);
    console.log(arrayCheckEls);
    const handlerChecked = () => {
      console.log("clickEvent");
      const isAllChacked = arrayCheckEls.every((item) => item.checked === true);
      if (!isAllChacked) return;
      checkBtn && (checkBtn.textContent = "complete!!");
      checkBtn?.removeEventListener("click", handlerChecked);
    };
    checkBtn?.addEventListener("click", handlerChecked);
  }
</script>

<style scoped>
  * {
    margin: 0;
    padding: 0;
  }
  .item1 {
    list-style: none;
  }
  .item2_wrap {
    display: flex;
    flex-flow: row nowrap;
  }
</style>
